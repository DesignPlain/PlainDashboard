import { Resource } from 'src/app/Models/CloudResource';
import {
  GCP_ComputeEngine,
  GCP_StorageBucket,
  GCP_SubNetwork,
  GCP_VPCNetwork,
  ResourceProperties,
} from 'src/app/Models/ResourceProperties';
import { InputType } from 'src/app/enum/InputType';
import { ResourceType } from 'src/app/enum/ResourceType';

// TODO: This function will need to be autogenerated along with the ResourceType List
export function UpdateResourceConfig(
  currentResource: ResourceType,
  listMap: Map<string, any>,
  config: Map<string, { type: InputType; val: string }>
): Resource | null {
  let inputList: string[] = [];

  let GetResourceInput = (arg: string): any =>
    listMap.get(arg) ?? config.get(arg)?.val;
  let resConfig: Resource | null = null;
  switch (currentResource) {
    case ResourceType.Simple_Storage_Service: {
      ResourceProperties.propertiesMap
        .get(ResourceType.Simple_Storage_Service)
        ?.forEach((_, f) => inputList.push(f));

      resConfig = new GCP_StorageBucket(
        GetResourceInput(inputList[0]),
        GetResourceInput(inputList[1]),
        GetResourceInput(inputList[2]),
        GetResourceInput(inputList[3])
      );
      break;
    }
    case ResourceType.EC2: {
      ResourceProperties.propertiesMap
        .get(ResourceType.EC2)
        ?.forEach((_, f) => inputList.push(f));

      resConfig = new GCP_ComputeEngine(
        GetResourceInput(inputList[0]),
        GetResourceInput(inputList[1]),
        GetResourceInput(inputList[2]),
        GetResourceInput(inputList[3]),
        GetResourceInput(inputList[4]),
        GetResourceInput(inputList[5]),
        GetResourceInput(inputList[6]),
        GetResourceInput(inputList[7]),
        GetResourceInput(inputList[8]),
        GetResourceInput(inputList[9]),
        GetResourceInput(inputList[10])
      );
      break;
    }
    case ResourceType.Virtual_Private_Cloud: {
      ResourceProperties.propertiesMap
        .get(ResourceType.Virtual_Private_Cloud)
        ?.forEach((_, f) => inputList.push(f));

      resConfig = new GCP_VPCNetwork(
        GetResourceInput(inputList[0]),
        GetResourceInput(inputList[1]),
        GetResourceInput(inputList[2]),
        GetResourceInput(inputList[3]),
        GetResourceInput(inputList[4])
      );
      break;
    }
    case ResourceType.Subnet: {
      ResourceProperties.propertiesMap
        .get(ResourceType.Subnet)
        ?.forEach((_, f) => inputList.push(f));

      resConfig = new GCP_SubNetwork(
        GetResourceInput(inputList[0]),
        GetResourceInput(inputList[1]),
        GetResourceInput(inputList[2]),
        GetResourceInput(inputList[3])
      );
      break;
    }
  }

  return resConfig;
}
