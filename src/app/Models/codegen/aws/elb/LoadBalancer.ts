import {
  InputType,
  InputType_String_GetTypes,
  InputType_Number_GetTypes,
  InputType_Map_GetTypes,
} from '../../ds_base/InputType';
import { DS_Resource } from '../../ds_base/Resource';
import { DynamicUIProps } from '../../ds_base/DynamicUIProps';
import {
  elb_LoadBalancerHealthCheck,
  elb_LoadBalancerHealthCheck_GetTypes,
} from '../types/elb_LoadBalancerHealthCheck';
import {
  elb_LoadBalancerListener,
  elb_LoadBalancerListener_GetTypes,
} from '../types/elb_LoadBalancerListener';
import {
  elb_LoadBalancerAccessLogs,
  elb_LoadBalancerAccessLogs_GetTypes,
} from '../types/elb_LoadBalancerAccessLogs';

export interface LoadBalancerArgs {
  // A health_check block. Health Check documented below.
  healthCheck?: elb_LoadBalancerHealthCheck;

  /*
The name of the security group that you can use as
part of your inbound rules for your load balancer's back-end application
instances. Use this for Classic or Default VPC only.
*/
  sourceSecurityGroup?: string;

  // Boolean to enable connection draining. Default: `false`
  connectionDraining?: boolean;

  // Enable cross-zone load balancing. Default: `true`
  crossZoneLoadBalancing?: boolean;

  // The time in seconds that the connection is allowed to be idle. Default: `60`
  idleTimeout?: number;

  // If true, ELB will be an internal ELB.
  internal?: boolean;

  /*
A list of security group IDs to assign to the ELB.
Only valid if creating an ELB within a VPC
*/
  securityGroups?: Array<string>;

  // The AZ's to serve traffic in.
  availabilityZones?: Array<string>;

  // A list of instance ids to place in the ELB pool.
  instances?: Array<string>;

  // A list of listener blocks. Listeners documented below.
  listeners?: Array<elb_LoadBalancerListener>;

  /*
Creates a unique name beginning with the specified
prefix. Conflicts with `name`.
*/
  namePrefix?: string;

  // A list of subnet IDs to attach to the ELB. When an update to subnets will remove all current subnets, this will force a new resource.
  subnets?: Array<string>;

  /*
A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.

Exactly one of `availability_zones` or `subnets` must be specified: this
determines if the ELB exists in a VPC or in EC2-classic.
*/
  tags?: Map<string, string>;

  // An Access Logs block. Access Logs documented below.
  accessLogs?: elb_LoadBalancerAccessLogs;

  // The time in seconds to allow for connections to drain. Default: `300`
  connectionDrainingTimeout?: number;

  // Determines how the load balancer handles requests that might pose a security risk to an application due to HTTP desync. Valid values are `monitor`, `defensive` (default), `strictest`.
  desyncMitigationMode?: string;

  // The name of the ELB. By default generated by this provider.
  name?: string;
}
export class LoadBalancer extends DS_Resource {
  // Determines how the load balancer handles requests that might pose a security risk to an application due to HTTP desync. Valid values are `monitor`, `defensive` (default), `strictest`.
  public desyncMitigationMode?: string;

  // The DNS name of the ELB
  public dnsName?: string;

  // An Access Logs block. Access Logs documented below.
  public accessLogs?: elb_LoadBalancerAccessLogs;

  // The ARN of the ELB
  public arn?: string;

  // The name of the ELB. By default generated by this provider.
  public name?: string;

  /*
A list of security group IDs to assign to the ELB.
Only valid if creating an ELB within a VPC
*/
  public securityGroups?: Array<string>;

  // A list of subnet IDs to attach to the ELB. When an update to subnets will remove all current subnets, this will force a new resource.
  public subnets?: Array<string>;

  // Boolean to enable connection draining. Default: `false`
  public connectionDraining?: boolean;

  // A list of listener blocks. Listeners documented below.
  public listeners?: Array<elb_LoadBalancerListener>;

  // Enable cross-zone load balancing. Default: `true`
  public crossZoneLoadBalancing?: boolean;

  // A health_check block. Health Check documented below.
  public healthCheck?: elb_LoadBalancerHealthCheck;

  // The time in seconds that the connection is allowed to be idle. Default: `60`
  public idleTimeout?: number;

  // A list of instance ids to place in the ELB pool.
  public instances?: Array<string>;

  /*
Creates a unique name beginning with the specified
prefix. Conflicts with `name`.
*/
  public namePrefix?: string;

  /*
The name of the security group that you can use as
part of your inbound rules for your load balancer's back-end application
instances. Use this for Classic or Default VPC only.
*/
  public sourceSecurityGroup?: string;

  // The AZ's to serve traffic in.
  public availabilityZones?: Array<string>;

  // The time in seconds to allow for connections to drain. Default: `300`
  public connectionDrainingTimeout?: number;

  // A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
  public tagsAll?: Map<string, string>;

  // The canonical hosted zone ID of the ELB (to be used in a Route 53 Alias record)
  public zoneId?: string;

  /*
A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.

Exactly one of `availability_zones` or `subnets` must be specified: this
determines if the ELB exists in a VPC or in EC2-classic.
*/
  public tags?: Map<string, string>;

  // If true, ELB will be an internal ELB.
  public internal?: boolean;

  /*
The ID of the security group that you can use as
part of your inbound rules for your load balancer's back-end application
instances. Only available on ELBs launched in a VPC.
*/
  public sourceSecurityGroupId?: string;

  public static GetTypes(): DynamicUIProps[] {
    return [
      new DynamicUIProps(
        InputType.Bool,
        'internal',
        'If true, ELB will be an internal ELB.',
        () => [],
        false,
        true,
      ),
      new DynamicUIProps(
        InputType.String,
        'namePrefix',
        'Creates a unique name beginning with the specified\nprefix. Conflicts with `name`.',
        () => [],
        false,
        true,
      ),
      new DynamicUIProps(
        InputType.Object,
        'accessLogs',
        'An Access Logs block. Access Logs documented below.',
        () => elb_LoadBalancerAccessLogs_GetTypes(),
        false,
        false,
      ),
      new DynamicUIProps(
        InputType.Number,
        'connectionDrainingTimeout',
        'The time in seconds to allow for connections to drain. Default: `300`',
        () => [],
        false,
        false,
      ),
      new DynamicUIProps(
        InputType.Object,
        'healthCheck',
        'A health_check block. Health Check documented below.',
        () => elb_LoadBalancerHealthCheck_GetTypes(),
        false,
        false,
      ),
      new DynamicUIProps(
        InputType.String,
        'sourceSecurityGroup',
        "The name of the security group that you can use as\npart of your inbound rules for your load balancer's back-end application\ninstances. Use this for Classic or Default VPC only.",
        () => [],
        false,
        false,
      ),
      new DynamicUIProps(
        InputType.Bool,
        'crossZoneLoadBalancing',
        'Enable cross-zone load balancing. Default: `true`',
        () => [],
        false,
        false,
      ),
      new DynamicUIProps(
        InputType.Array,
        'instances',
        'A list of instance ids to place in the ELB pool.',
        () => InputType_String_GetTypes(),
        false,
        false,
      ),
      new DynamicUIProps(
        InputType.Array,
        'subnets',
        'A list of subnet IDs to attach to the ELB. When an update to subnets will remove all current subnets, this will force a new resource.',
        () => InputType_String_GetTypes(),
        false,
        false,
      ),
      new DynamicUIProps(
        InputType.Map,
        'tags',
        'A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.\n\nExactly one of `availability_zones` or `subnets` must be specified: this\ndetermines if the ELB exists in a VPC or in EC2-classic.',
        () => InputType_Map_GetTypes(),
        false,
        false,
      ),
      new DynamicUIProps(
        InputType.Array,
        'securityGroups',
        'A list of security group IDs to assign to the ELB.\nOnly valid if creating an ELB within a VPC',
        () => InputType_String_GetTypes(),
        false,
        false,
      ),
      new DynamicUIProps(
        InputType.String,
        'desyncMitigationMode',
        'Determines how the load balancer handles requests that might pose a security risk to an application due to HTTP desync. Valid values are `monitor`, `defensive` (default), `strictest`.',
        () => [],
        false,
        false,
      ),
      new DynamicUIProps(
        InputType.Bool,
        'connectionDraining',
        'Boolean to enable connection draining. Default: `false`',
        () => [],
        false,
        false,
      ),
      new DynamicUIProps(
        InputType.Number,
        'idleTimeout',
        'The time in seconds that the connection is allowed to be idle. Default: `60`',
        () => [],
        false,
        false,
      ),
      new DynamicUIProps(
        InputType.Array,
        'availabilityZones',
        "The AZ's to serve traffic in.",
        () => InputType_String_GetTypes(),
        false,
        false,
      ),
      new DynamicUIProps(
        InputType.Array,
        'listeners',
        'A list of listener blocks. Listeners documented below.',
        () => elb_LoadBalancerListener_GetTypes(),
        true,
        false,
      ),
      new DynamicUIProps(
        InputType.String,
        'name',
        'The name of the ELB. By default generated by this provider.',
        () => [],
        false,
        true,
      ),
    ];
  }
}
