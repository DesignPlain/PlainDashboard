import {
  InputType,
  InputType_String_GetTypes,
  InputType_Number_GetTypes,
  InputType_Map_GetTypes,
} from "../../ds_base/InputType";
import { DynamicUIProps } from "../../ds_base/DynamicUIProps";

export interface dataproc_WorkflowTemplatePlacementManagedClusterConfigSecurityConfigKerberosConfig {
  // The lifetime of the ticket granting ticket, in hours. If not specified, or user specifies 0, then default value 10 will be used.
  tgtLifetimeHours?: number;

  // The admin server (IP or hostname) for the remote trusted realm in a cross realm trust relationship.
  crossRealmTrustAdminServer?: string;

  // The Cloud Storage URI of a KMS encrypted file containing the shared password between the on-cluster Kerberos realm and the remote trusted realm, in a cross realm trust relationship.
  crossRealmTrustSharedPassword?: string;

  // Flag to indicate whether to Kerberize the cluster (default: false). Set this field to true to enable Kerberos on a cluster.
  enableKerberos?: boolean;

  // The Cloud Storage URI of a KMS encrypted file containing the master key of the KDC database.
  kdcDbKey?: string;

  // The Cloud Storage URI of a KMS encrypted file containing the password to the user provided key. For the self-signed certificate, this password is generated by Dataproc.
  keyPassword?: string;

  // The Cloud Storage URI of a KMS encrypted file containing the password to the user provided keystore. For the self-signed certificate, this password is generated by Dataproc.
  keystorePassword?: string;

  // The Cloud Storage URI of the truststore file used for SSL encryption. If not provided, Dataproc will provide a self-signed certificate.
  truststore?: string;

  // The remote realm the Dataproc on-cluster KDC will trust, should the user enable cross realm trust.
  crossRealmTrustRealm?: string;

  // The Cloud Storage URI of the keystore file used for SSL encryption. If not provided, Dataproc will provide a self-signed certificate.
  keystore?: string;

  // The uri of the KMS key used to encrypt various sensitive files.
  kmsKey?: string;

  // The Cloud Storage URI of a KMS encrypted file containing the root principal password.
  rootPrincipalPassword?: string;

  // The Cloud Storage URI of a KMS encrypted file containing the password to the user provided truststore. For the self-signed certificate, this password is generated by Dataproc.
  truststorePassword?: string;

  // The KDC (IP or hostname) for the remote trusted realm in a cross realm trust relationship.
  crossRealmTrustKdc?: string;

  // The name of the on-cluster Kerberos realm. If not specified, the uppercased domain of hostnames will be the realm.
  realm?: string;
}

export function dataproc_WorkflowTemplatePlacementManagedClusterConfigSecurityConfigKerberosConfig_GetTypes(): DynamicUIProps[] {
  return [
    new DynamicUIProps(
      InputType.String,
      "keystorePassword",
      "The Cloud Storage URI of a KMS encrypted file containing the password to the user provided keystore. For the self-signed certificate, this password is generated by Dataproc.",
      () => [],
      false,
      true,
    ),
    new DynamicUIProps(
      InputType.String,
      "crossRealmTrustRealm",
      "The remote realm the Dataproc on-cluster KDC will trust, should the user enable cross realm trust.",
      () => [],
      false,
      true,
    ),
    new DynamicUIProps(
      InputType.String,
      "keystore",
      "The Cloud Storage URI of the keystore file used for SSL encryption. If not provided, Dataproc will provide a self-signed certificate.",
      () => [],
      false,
      true,
    ),
    new DynamicUIProps(
      InputType.String,
      "kmsKey",
      "The uri of the KMS key used to encrypt various sensitive files.",
      () => [],
      false,
      true,
    ),
    new DynamicUIProps(
      InputType.String,
      "crossRealmTrustKdc",
      "The KDC (IP or hostname) for the remote trusted realm in a cross realm trust relationship.",
      () => [],
      false,
      true,
    ),
    new DynamicUIProps(
      InputType.Number,
      "tgtLifetimeHours",
      "The lifetime of the ticket granting ticket, in hours. If not specified, or user specifies 0, then default value 10 will be used.",
      () => [],
      false,
      true,
    ),
    new DynamicUIProps(
      InputType.Bool,
      "enableKerberos",
      "Flag to indicate whether to Kerberize the cluster (default: false). Set this field to true to enable Kerberos on a cluster.",
      () => [],
      false,
      true,
    ),
    new DynamicUIProps(
      InputType.String,
      "kdcDbKey",
      "The Cloud Storage URI of a KMS encrypted file containing the master key of the KDC database.",
      () => [],
      false,
      true,
    ),
    new DynamicUIProps(
      InputType.String,
      "keyPassword",
      "The Cloud Storage URI of a KMS encrypted file containing the password to the user provided key. For the self-signed certificate, this password is generated by Dataproc.",
      () => [],
      false,
      true,
    ),
    new DynamicUIProps(
      InputType.String,
      "truststore",
      "The Cloud Storage URI of the truststore file used for SSL encryption. If not provided, Dataproc will provide a self-signed certificate.",
      () => [],
      false,
      true,
    ),
    new DynamicUIProps(
      InputType.String,
      "crossRealmTrustSharedPassword",
      "The Cloud Storage URI of a KMS encrypted file containing the shared password between the on-cluster Kerberos realm and the remote trusted realm, in a cross realm trust relationship.",
      () => [],
      false,
      true,
    ),
    new DynamicUIProps(
      InputType.String,
      "rootPrincipalPassword",
      "The Cloud Storage URI of a KMS encrypted file containing the root principal password.",
      () => [],
      false,
      true,
    ),
    new DynamicUIProps(
      InputType.String,
      "truststorePassword",
      "The Cloud Storage URI of a KMS encrypted file containing the password to the user provided truststore. For the self-signed certificate, this password is generated by Dataproc.",
      () => [],
      false,
      true,
    ),
    new DynamicUIProps(
      InputType.String,
      "crossRealmTrustAdminServer",
      "The admin server (IP or hostname) for the remote trusted realm in a cross realm trust relationship.",
      () => [],
      false,
      true,
    ),
    new DynamicUIProps(
      InputType.String,
      "realm",
      "The name of the on-cluster Kerberos realm. If not specified, the uppercased domain of hostnames will be the realm.",
      () => [],
      false,
      true,
    ),
  ];
}
