import {
  InputType,
  InputType_String_GetTypes,
  InputType_Number_GetTypes,
  InputType_Map_GetTypes,
} from "src/app/enum/InputType";
import { Resource } from "src/app/Models/CloudResource";
import { DynamicUIProps } from "src/app/components/resource-config/resource-config.component";
import {
  Cloudrun_ServiceTemplate,
  Cloudrun_ServiceTemplate_GetTypes,
} from "../types/Cloudrun_ServiceTemplate";
import {
  Cloudrun_ServiceStatus,
  Cloudrun_ServiceStatus_GetTypes,
} from "../types/Cloudrun_ServiceStatus";
import {
  Cloudrun_ServiceTraffic,
  Cloudrun_ServiceTraffic_GetTypes,
} from "../types/Cloudrun_ServiceTraffic";
import {
  Cloudrun_ServiceMetadata,
  Cloudrun_ServiceMetadata_GetTypes,
} from "../types/Cloudrun_ServiceMetadata";

export interface ServiceArgs {
  /*
Traffic specifies how to distribute traffic over a collection of Knative Revisions
and Configurations
Structure is documented below.
*/
  Traffics?: Array<Cloudrun_ServiceTraffic>;

  /*
If set to `true`, the revision name (template.metadata.name) will be omitted and
autogenerated by Cloud Run. This cannot be set to `true` while `template.metadata.name`
is also set.
(For legacy support, if `template.metadata.name` is unset in state while
this field is set to false, the revision name will still autogenerate.)
*/
  AutogenerateRevisionName?: boolean;

  // The location of the cloud run instance. eg us-central1
  Location?: string;

  /*
Metadata associated with this Service, including name, namespace, labels,
and annotations.
Structure is documented below.
*/
  Metadata?: Cloudrun_ServiceMetadata;

  /*
Name must be unique within a Google Cloud project and region.
Is required when creating resources. Name is primarily intended
for creation idempotence and configuration definition. Cannot be updated.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
*/
  Name?: string;

  /*
The ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
*/
  Project?: string;

  /*
template holds the latest specification for the Revision to
be stamped out. The template references the container image, and may also
include labels and annotations that should be attached to the Revision.
To correlate a Revision, and/or to force a Revision to be created when the
spec doesn't otherwise change, a nonce label may be provided in the
template metadata. For more details, see:
https://github.com/knative/serving/blob/main/docs/client-conventions.md#associate-modifications-with-revisions
Cloud Run does not currently support referencing a build that is
responsible for materializing the container image from source.
Structure is documented below.
*/
  Template?: Cloudrun_ServiceTemplate;
}
export class Service extends Resource {
  /*
(Output)
Status of the condition, one of True, False, Unknown.
*/
  public Statuses?: Array<Cloudrun_ServiceStatus>;

  /*
template holds the latest specification for the Revision to
be stamped out. The template references the container image, and may also
include labels and annotations that should be attached to the Revision.
To correlate a Revision, and/or to force a Revision to be created when the
spec doesn't otherwise change, a nonce label may be provided in the
template metadata. For more details, see:
https://github.com/knative/serving/blob/main/docs/client-conventions.md#associate-modifications-with-revisions
Cloud Run does not currently support referencing a build that is
responsible for materializing the container image from source.
Structure is documented below.
*/
  public Template?: Cloudrun_ServiceTemplate;

  /*
Traffic specifies how to distribute traffic over a collection of Knative Revisions
and Configurations
Structure is documented below.
*/
  public Traffics?: Array<Cloudrun_ServiceTraffic>;

  /*
If set to `true`, the revision name (template.metadata.name) will be omitted and
autogenerated by Cloud Run. This cannot be set to `true` while `template.metadata.name`
is also set.
(For legacy support, if `template.metadata.name` is unset in state while
this field is set to false, the revision name will still autogenerate.)
*/
  public AutogenerateRevisionName?: boolean;

  // The location of the cloud run instance. eg us-central1
  public Location?: string;

  /*
Metadata associated with this Service, including name, namespace, labels,
and annotations.
Structure is documented below.
*/
  public Metadata?: Cloudrun_ServiceMetadata;

  /*
Name must be unique within a Google Cloud project and region.
Is required when creating resources. Name is primarily intended
for creation idempotence and configuration definition. Cannot be updated.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
*/
  public Name?: string;

  /*
The ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
*/
  public Project?: string;

  public static GetTypes(): DynamicUIProps[] {
    return [
      new DynamicUIProps(
        InputType.String,
        "Name",
        "Name must be unique within a Google Cloud project and region.\nIs required when creating resources. Name is primarily intended\nfor creation idempotence and configuration definition. Cannot be updated.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
        [],
        false,
        true,
      ),
      new DynamicUIProps(
        InputType.String,
        "Project",
        "The ID of the project in which the resource belongs.\nIf it is not provided, the provider project is used.",
        [],
        false,
        true,
      ),
      new DynamicUIProps(
        InputType.Object,
        "Template",
        "template holds the latest specification for the Revision to\nbe stamped out. The template references the container image, and may also\ninclude labels and annotations that should be attached to the Revision.\nTo correlate a Revision, and/or to force a Revision to be created when the\nspec doesn't otherwise change, a nonce label may be provided in the\ntemplate metadata. For more details, see:\nhttps://github.com/knative/serving/blob/main/docs/client-conventions.md#associate-modifications-with-revisions\nCloud Run does not currently support referencing a build that is\nresponsible for materializing the container image from source.\nStructure is documented below.",
        Cloudrun_ServiceTemplate_GetTypes(),
        false,
        false,
      ),
      new DynamicUIProps(
        InputType.Array,
        "Traffics",
        "Traffic specifies how to distribute traffic over a collection of Knative Revisions\nand Configurations\nStructure is documented below.",
        Cloudrun_ServiceTraffic_GetTypes(),
        false,
        false,
      ),
      new DynamicUIProps(
        InputType.Bool,
        "AutogenerateRevisionName",
        "If set to `true`, the revision name (template.metadata.name) will be omitted and\nautogenerated by Cloud Run. This cannot be set to `true` while `template.metadata.name`\nis also set.\n(For legacy support, if `template.metadata.name` is unset in state while\nthis field is set to false, the revision name will still autogenerate.)",
        [],
        false,
        false,
      ),
      new DynamicUIProps(
        InputType.String,
        "Location",
        "The location of the cloud run instance. eg us-central1",
        [],
        true,
        true,
      ),
      new DynamicUIProps(
        InputType.Object,
        "Metadata",
        "Metadata associated with this Service, including name, namespace, labels,\nand annotations.\nStructure is documented below.",
        Cloudrun_ServiceMetadata_GetTypes(),
        false,
        false,
      ),
    ];
  }
}
